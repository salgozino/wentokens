// Generated by @wagmi/cli@0.1.10 on 5/11/2023 at 3:12:22 PM
import {
  useContract,
  UseContractConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractRead,
  UseContractReadConfig,
  useNetwork,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import { WriteContractMode, PrepareWriteContractResult, ReadContractResult } from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AirdropComparison
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const airdropComparisonABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_total', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'airdropERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'disperseToken',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AyyLmaoRaffle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ayyLmaoRaffleABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'OnGoingRaffles',
    outputs: [{ name: 'raffleId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_raffleId', internalType: 'uint256', type: 'uint256' },
      { name: 'ticketCount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'registerPurchase',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Airdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export const airdropABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_total', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'airdropERC20',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'airdropETH',
    outputs: [],
  },
] as const;

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * * - [__View Contract on Arbitrum sepolia Arbiscan__](https://sepolia.arbiscan.io//address/0x18f9988d5451d36d60d0a1270b6cd8850e84c34e)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export const airdropAddress = {
  1: '0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231',
  5: '0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231',
  56: '0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231',
  137: '0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb',
  42161: '0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231',
  43113: '0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb',
  43114: '0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb',
  80001: '0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb',
  421613: '0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231',
  431614: '0x18f9988d5451d36d60d0a1270b6cd8850e84c34e',
  11155111: '0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231',
} as const;

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io//address/0x18f9988d5451d36d60d0a1270b6cd8850e84c34e)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export const airdropConfig = { address: airdropAddress, abi: airdropABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bad
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const badABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'quantities', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'batchAirdrop',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BananaSplits
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bananaSplitsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_addresses', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'splitETH',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Batch
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const batchABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'streamer', internalType: 'address', type: 'address' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'starts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'cliffs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'rates', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'createBatch',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BatchStreamer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const batchStreamerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'streamer', internalType: 'address', type: 'address' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'starts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'cliffs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'rates', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'createBatch',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BatchBetter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const batchBetterABI = [
  { type: 'error', inputs: [], name: 'ArrayMismatch' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'streamer', internalType: 'address', type: 'address' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'starts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'cliffs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'rates', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'createBatchBetter',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BatchStreamerBetter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const batchStreamerBetterABI = [
  { type: 'error', inputs: [], name: 'ArrayMismatch' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'streamer', internalType: 'address', type: 'address' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'starts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'cliffs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'rates', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'createBatchBetter',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Deployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_bytecode', internalType: 'bytes', type: 'bytes' },
      { name: '_salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'deploy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_bytecode', internalType: 'bytes', type: 'bytes' },
      { name: '_salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'preComputeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Foo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fooABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'channelById',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'channels',
    outputs: [
      { name: 'channelType', internalType: 'enum Foo.ChannelType', type: 'uint8' },
      { name: 'channelState', internalType: 'uint8', type: 'uint8' },
      { name: 'verifiedBy', internalType: 'address', type: 'address' },
      { name: 'poolContribution', internalType: 'uint256', type: 'uint256' },
      { name: 'channelHistoricalZ', internalType: 'uint256', type: 'uint256' },
      { name: 'channelFairShareCount', internalType: 'uint256', type: 'uint256' },
      { name: 'channelLastUpdate', internalType: 'uint256', type: 'uint256' },
      { name: 'channelStartBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'channelUpdateBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'channelWeight', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'channelsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'channelsCount2',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_channel', internalType: 'address', type: 'address' },
      { name: '_channelType', internalType: 'enum Foo.ChannelType', type: 'uint8' },
      { name: '_amountDeposited', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createChannelBad',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_channel', internalType: 'address', type: 'address' },
      { name: '_channelType', internalType: 'enum Foo.ChannelType', type: 'uint8' },
      { name: '_amountDeposited', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createChannelGood',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721A
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721AABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fromTokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'toTokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ConsecutiveTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721A__IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721AIerc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Good
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const goodABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'ArrayMismatch' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fromTokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'toTokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ConsecutiveTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'quantities', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'batchAirdrop',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721A
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721AABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fromTokenId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'toTokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ConsecutiveTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Milady
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const miladyABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'milady',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Modifiers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const modifiersABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'boolFunction',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'uint256Function',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Packing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const packingABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'aStructs',
    outputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'bStructs',
    outputs: [
      { name: 'a', internalType: 'uint8', type: 'uint8' },
      { name: 'b', internalType: 'uint8', type: 'uint8' },
    ],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'storeA', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'storeB', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sender', internalType: 'address', type: 'address' }],
    name: 'updateA',
    outputs: [
      {
        name: '',
        internalType: 'struct Packing.A',
        type: 'tuple',
        components: [
          { name: 'a', internalType: 'uint256', type: 'uint256' },
          { name: 'b', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sender', internalType: 'address', type: 'address' }],
    name: 'updateB',
    outputs: [
      {
        name: '',
        internalType: 'struct Packing.B',
        type: 'tuple',
        components: [
          { name: 'a', internalType: 'uint8', type: 'uint8' },
          { name: 'b', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Reverting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const revertingABI = [
  { type: 'error', inputs: [], name: 'NotEqual' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revertCustomError',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256', type: 'uint256' },
      { name: 'b', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revertRequire',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RevertsBad
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const revertsBadABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_milady', internalType: 'uint256', type: 'uint256' },
      { name: '_world', internalType: 'uint256', type: 'uint256' },
      { name: '_order', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidArg' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'milady',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'order',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'world',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RevertsGood
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const revertsGoodABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_milady', internalType: 'uint256', type: 'uint256' },
      { name: '_world', internalType: 'uint256', type: 'uint256' },
      { name: '_order', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidArg' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'milady',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'order',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'world',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Token
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WhoopDoopRaffle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const whoopDoopRaffleABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'OnGoingRaffles',
    outputs: [{ name: 'raffleId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_RaffleId', internalType: 'uint256', type: 'uint256' },
      { name: 'ticketCount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'registerPurchase',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link airdropComparisonABI}__.
 */
export function useAirdropComparison(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: airdropComparisonABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropComparisonABI}__.
 */
export function useAirdropComparisonWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropComparisonABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof airdropComparisonABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropComparisonABI, TFunctionName>({
    abi: airdropComparisonABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropComparisonABI}__ and `functionName` set to `"airdropERC20"`.
 */
export function useAirdropComparisonAirdropErc20<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropComparisonABI, 'airdropERC20'>['abi'],
        'airdropERC20'
      > & { functionName?: 'airdropERC20' }
    : UseContractWriteConfig<TMode, typeof airdropComparisonABI, 'airdropERC20'> & {
        abi?: never;
        functionName?: 'airdropERC20';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropComparisonABI, 'airdropERC20'>({
    abi: airdropComparisonABI,
    functionName: 'airdropERC20',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropComparisonABI}__ and `functionName` set to `"disperseToken"`.
 */
export function useAirdropComparisonDisperseToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropComparisonABI, 'disperseToken'>['abi'],
        'disperseToken'
      > & { functionName?: 'disperseToken' }
    : UseContractWriteConfig<TMode, typeof airdropComparisonABI, 'disperseToken'> & {
        abi?: never;
        functionName?: 'disperseToken';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropComparisonABI, 'disperseToken'>({
    abi: airdropComparisonABI,
    functionName: 'disperseToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropComparisonABI}__.
 */
export function usePrepareAirdropComparisonWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropComparisonABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: airdropComparisonABI, ...config } as UsePrepareContractWriteConfig<
    typeof airdropComparisonABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropComparisonABI}__ and `functionName` set to `"airdropERC20"`.
 */
export function usePrepareAirdropComparisonAirdropErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropComparisonABI, 'airdropERC20'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropComparisonABI,
    functionName: 'airdropERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropComparisonABI, 'airdropERC20'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropComparisonABI}__ and `functionName` set to `"disperseToken"`.
 */
export function usePrepareAirdropComparisonDisperseToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropComparisonABI, 'disperseToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropComparisonABI,
    functionName: 'disperseToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropComparisonABI, 'disperseToken'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ayyLmaoRaffleABI}__.
 */
export function useAyyLmaoRaffle(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ayyLmaoRaffleABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ayyLmaoRaffleABI}__.
 */
export function useAyyLmaoRaffleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ayyLmaoRaffleABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ayyLmaoRaffleABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ayyLmaoRaffleABI, ...config } as UseContractReadConfig<
    typeof ayyLmaoRaffleABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ayyLmaoRaffleABI}__ and `functionName` set to `"OnGoingRaffles"`.
 */
export function useAyyLmaoRaffleOnGoingRaffles<
  TSelectData = ReadContractResult<typeof ayyLmaoRaffleABI, 'OnGoingRaffles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ayyLmaoRaffleABI, 'OnGoingRaffles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ayyLmaoRaffleABI, functionName: 'OnGoingRaffles', ...config } as UseContractReadConfig<
    typeof ayyLmaoRaffleABI,
    'OnGoingRaffles',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ayyLmaoRaffleABI}__.
 */
export function useAyyLmaoRaffleWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ayyLmaoRaffleABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ayyLmaoRaffleABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ayyLmaoRaffleABI, TFunctionName>({ abi: ayyLmaoRaffleABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ayyLmaoRaffleABI}__ and `functionName` set to `"registerPurchase"`.
 */
export function useAyyLmaoRaffleRegisterPurchase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ayyLmaoRaffleABI, 'registerPurchase'>['abi'],
        'registerPurchase'
      > & { functionName?: 'registerPurchase' }
    : UseContractWriteConfig<TMode, typeof ayyLmaoRaffleABI, 'registerPurchase'> & {
        abi?: never;
        functionName?: 'registerPurchase';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ayyLmaoRaffleABI, 'registerPurchase'>({
    abi: ayyLmaoRaffleABI,
    functionName: 'registerPurchase',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ayyLmaoRaffleABI}__.
 */
export function usePrepareAyyLmaoRaffleWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ayyLmaoRaffleABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ayyLmaoRaffleABI, ...config } as UsePrepareContractWriteConfig<
    typeof ayyLmaoRaffleABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ayyLmaoRaffleABI}__ and `functionName` set to `"registerPurchase"`.
 */
export function usePrepareAyyLmaoRaffleRegisterPurchase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ayyLmaoRaffleABI, 'registerPurchase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ayyLmaoRaffleABI,
    functionName: 'registerPurchase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ayyLmaoRaffleABI, 'registerPurchase'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link airdropABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function useAirdrop(
  config: Omit<UseContractConfig, 'abi' | 'address'> & { chainId?: keyof typeof airdropAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContract({ abi: airdropABI, address: airdropAddress[chainId as keyof typeof airdropAddress], ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function useAirdropWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof airdropABI, string>['abi'], TFunctionName> & {
        address?: `0x${string}`;
        chainId?: TChainId;
      }
    : UseContractWriteConfig<TMode, typeof airdropABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof airdropABI, TFunctionName>({
    abi: airdropABI,
    address: airdropAddress[chainId as keyof typeof airdropAddress],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropERC20"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function useAirdropAirdropErc20<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropABI, 'airdropERC20'>['abi'],
        'airdropERC20'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'airdropERC20' }
    : UseContractWriteConfig<TMode, typeof airdropABI, 'airdropERC20'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'airdropERC20';
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof airdropABI, 'airdropERC20'>({
    abi: airdropABI,
    address: airdropAddress[chainId as keyof typeof airdropAddress],
    functionName: 'airdropERC20',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropETH"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function useAirdropAirdropEth<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropABI, 'airdropETH'>['abi'],
        'airdropETH'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'airdropETH' }
    : UseContractWriteConfig<TMode, typeof airdropABI, 'airdropETH'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'airdropETH';
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof airdropABI, 'airdropETH'>({
    abi: airdropABI,
    address: airdropAddress[chainId as keyof typeof airdropAddress],
    functionName: 'airdropETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function usePrepareAirdropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof airdropAddress;
  } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[chainId as keyof typeof airdropAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropERC20"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function usePrepareAirdropAirdropErc20(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'airdropERC20'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof airdropAddress;
  } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[chainId as keyof typeof airdropAddress],
    functionName: 'airdropERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'airdropERC20'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropETH"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Bnb Smart Chain Bsc Scan__](https://bscscan.com/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Avalanche Fuji Snow Trace__](https://testnet.snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Avalanche Snow Trace__](https://snowtrace.io/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x22d34C032b447AC9621705c6B4C6BD1B4b0130eb)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231)
 */
export function usePrepareAirdropAirdropEth(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'airdropETH'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof airdropAddress;
  } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[chainId as keyof typeof airdropAddress],
    functionName: 'airdropETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'airdropETH'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link badABI}__.
 */
export function useBad(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: badABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__.
 */
export function useBadRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof badABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof badABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: badABI, ...config } as UseContractReadConfig<
    typeof badABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBadBalanceOf<TSelectData = ReadContractResult<typeof badABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof badABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"getApproved"`.
 */
export function useBadGetApproved<TSelectData = ReadContractResult<typeof badABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof badABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useBadIsApprovedForAll<TSelectData = ReadContractResult<typeof badABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof badABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof badABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"name"`.
 */
export function useBadName<TSelectData = ReadContractResult<typeof badABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof badABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"owner"`.
 */
export function useBadOwner<TSelectData = ReadContractResult<typeof badABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof badABI,
    'owner',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useBadOwnerOf<TSelectData = ReadContractResult<typeof badABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof badABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBadSupportsInterface<TSelectData = ReadContractResult<typeof badABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof badABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof badABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"symbol"`.
 */
export function useBadSymbol<TSelectData = ReadContractResult<typeof badABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof badABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useBadTokenByIndex<TSelectData = ReadContractResult<typeof badABI, 'tokenByIndex'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'tokenByIndex', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'tokenByIndex', ...config } as UseContractReadConfig<
    typeof badABI,
    'tokenByIndex',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useBadTokenOfOwnerByIndex<TSelectData = ReadContractResult<typeof badABI, 'tokenOfOwnerByIndex'>>(
  config: Omit<
    UseContractReadConfig<typeof badABI, 'tokenOfOwnerByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'tokenOfOwnerByIndex', ...config } as UseContractReadConfig<
    typeof badABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useBadTokenUri<TSelectData = ReadContractResult<typeof badABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof badABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBadTotalSupply<TSelectData = ReadContractResult<typeof badABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof badABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: badABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof badABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__.
 */
export function useBadWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof badABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof badABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, TFunctionName>({ abi: badABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"approve"`.
 */
export function useBadApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof badABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof badABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'approve'>({ abi: badABI, functionName: 'approve', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"batchAirdrop"`.
 */
export function useBadBatchAirdrop<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badABI, 'batchAirdrop'>['abi'],
        'batchAirdrop'
      > & { functionName?: 'batchAirdrop' }
    : UseContractWriteConfig<TMode, typeof badABI, 'batchAirdrop'> & {
        abi?: never;
        functionName?: 'batchAirdrop';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'batchAirdrop'>({
    abi: badABI,
    functionName: 'batchAirdrop',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBadRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof badABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'renounceOwnership'>({
    abi: badABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useBadSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof badABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'safeTransferFrom'>({
    abi: badABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useBadSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof badABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'setApprovalForAll'>({
    abi: badABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBadTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof badABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'transferFrom'>({
    abi: badABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBadTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof badABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof badABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof badABI, 'transferOwnership'>({
    abi: badABI,
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__.
 */
export function usePrepareBadWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: badABI, ...config } as UsePrepareContractWriteConfig<
    typeof badABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBadApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: badABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof badABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"batchAirdrop"`.
 */
export function usePrepareBadBatchAirdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'batchAirdrop'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: badABI,
    functionName: 'batchAirdrop',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badABI, 'batchAirdrop'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBadRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: badABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareBadSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: badABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareBadSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: badABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBadTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: badABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link badABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBadTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof badABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: badABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof badABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badABI}__.
 */
export function useBadEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof badABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: badABI, ...config } as UseContractEventConfig<typeof badABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badABI}__ and `eventName` set to `"Approval"`.
 */
export function useBadApprovalEvent(
  config: Omit<UseContractEventConfig<typeof badABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: badABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof badABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useBadApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof badABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: badABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof badABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBadOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof badABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: badABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof badABI,
    'OwnershipTransferred'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link badABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBadTransferEvent(
  config: Omit<UseContractEventConfig<typeof badABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: badABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof badABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bananaSplitsABI}__.
 */
export function useBananaSplits(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: bananaSplitsABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bananaSplitsABI}__.
 */
export function useBananaSplitsWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof bananaSplitsABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof bananaSplitsABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bananaSplitsABI, TFunctionName>({ abi: bananaSplitsABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bananaSplitsABI}__ and `functionName` set to `"splitETH"`.
 */
export function useBananaSplitsSplitEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bananaSplitsABI, 'splitETH'>['abi'],
        'splitETH'
      > & { functionName?: 'splitETH' }
    : UseContractWriteConfig<TMode, typeof bananaSplitsABI, 'splitETH'> & {
        abi?: never;
        functionName?: 'splitETH';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bananaSplitsABI, 'splitETH'>({
    abi: bananaSplitsABI,
    functionName: 'splitETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bananaSplitsABI}__.
 */
export function usePrepareBananaSplitsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof bananaSplitsABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: bananaSplitsABI, ...config } as UsePrepareContractWriteConfig<
    typeof bananaSplitsABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bananaSplitsABI}__ and `functionName` set to `"splitETH"`.
 */
export function usePrepareBananaSplitsSplitEth(
  config: Omit<UsePrepareContractWriteConfig<typeof bananaSplitsABI, 'splitETH'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: bananaSplitsABI,
    functionName: 'splitETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bananaSplitsABI, 'splitETH'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link batchABI}__.
 */
export function useBatch(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: batchABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchABI}__.
 */
export function useBatchWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof batchABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof batchABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchABI, TFunctionName>({ abi: batchABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"createBatch"`.
 */
export function useBatchCreateBatch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchABI, 'createBatch'>['abi'],
        'createBatch'
      > & { functionName?: 'createBatch' }
    : UseContractWriteConfig<TMode, typeof batchABI, 'createBatch'> & {
        abi?: never;
        functionName?: 'createBatch';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchABI, 'createBatch'>({
    abi: batchABI,
    functionName: 'createBatch',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchABI}__.
 */
export function usePrepareBatchWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof batchABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: batchABI, ...config } as UsePrepareContractWriteConfig<
    typeof batchABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"createBatch"`.
 */
export function usePrepareBatchCreateBatch(
  config: Omit<UsePrepareContractWriteConfig<typeof batchABI, 'createBatch'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchABI,
    functionName: 'createBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchABI, 'createBatch'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link batchStreamerABI}__.
 */
export function useBatchStreamer(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: batchStreamerABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchStreamerABI}__.
 */
export function useBatchStreamerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof batchStreamerABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof batchStreamerABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchStreamerABI, TFunctionName>({ abi: batchStreamerABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchStreamerABI}__ and `functionName` set to `"createBatch"`.
 */
export function useBatchStreamerCreateBatch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchStreamerABI, 'createBatch'>['abi'],
        'createBatch'
      > & { functionName?: 'createBatch' }
    : UseContractWriteConfig<TMode, typeof batchStreamerABI, 'createBatch'> & {
        abi?: never;
        functionName?: 'createBatch';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchStreamerABI, 'createBatch'>({
    abi: batchStreamerABI,
    functionName: 'createBatch',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchStreamerABI}__.
 */
export function usePrepareBatchStreamerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof batchStreamerABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: batchStreamerABI, ...config } as UsePrepareContractWriteConfig<
    typeof batchStreamerABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchStreamerABI}__ and `functionName` set to `"createBatch"`.
 */
export function usePrepareBatchStreamerCreateBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchStreamerABI, 'createBatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchStreamerABI,
    functionName: 'createBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchStreamerABI, 'createBatch'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link batchBetterABI}__.
 */
export function useBatchBetter(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: batchBetterABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchBetterABI}__.
 */
export function useBatchBetterWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof batchBetterABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof batchBetterABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchBetterABI, TFunctionName>({ abi: batchBetterABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchBetterABI}__ and `functionName` set to `"createBatchBetter"`.
 */
export function useBatchBetterCreateBatchBetter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchBetterABI, 'createBatchBetter'>['abi'],
        'createBatchBetter'
      > & { functionName?: 'createBatchBetter' }
    : UseContractWriteConfig<TMode, typeof batchBetterABI, 'createBatchBetter'> & {
        abi?: never;
        functionName?: 'createBatchBetter';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchBetterABI, 'createBatchBetter'>({
    abi: batchBetterABI,
    functionName: 'createBatchBetter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchBetterABI}__.
 */
export function usePrepareBatchBetterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof batchBetterABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: batchBetterABI, ...config } as UsePrepareContractWriteConfig<
    typeof batchBetterABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchBetterABI}__ and `functionName` set to `"createBatchBetter"`.
 */
export function usePrepareBatchBetterCreateBatchBetter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchBetterABI, 'createBatchBetter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchBetterABI,
    functionName: 'createBatchBetter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchBetterABI, 'createBatchBetter'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link batchStreamerBetterABI}__.
 */
export function useBatchStreamerBetter(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: batchStreamerBetterABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchStreamerBetterABI}__.
 */
export function useBatchStreamerBetterWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchStreamerBetterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof batchStreamerBetterABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchStreamerBetterABI, TFunctionName>({
    abi: batchStreamerBetterABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchStreamerBetterABI}__ and `functionName` set to `"createBatchBetter"`.
 */
export function useBatchStreamerBetterCreateBatchBetter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof batchStreamerBetterABI, 'createBatchBetter'>['abi'],
        'createBatchBetter'
      > & { functionName?: 'createBatchBetter' }
    : UseContractWriteConfig<TMode, typeof batchStreamerBetterABI, 'createBatchBetter'> & {
        abi?: never;
        functionName?: 'createBatchBetter';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof batchStreamerBetterABI, 'createBatchBetter'>({
    abi: batchStreamerBetterABI,
    functionName: 'createBatchBetter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchStreamerBetterABI}__.
 */
export function usePrepareBatchStreamerBetterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof batchStreamerBetterABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: batchStreamerBetterABI, ...config } as UsePrepareContractWriteConfig<
    typeof batchStreamerBetterABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchStreamerBetterABI}__ and `functionName` set to `"createBatchBetter"`.
 */
export function usePrepareBatchStreamerBetterCreateBatchBetter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchStreamerBetterABI, 'createBatchBetter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchStreamerBetterABI,
    functionName: 'createBatchBetter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchStreamerBetterABI, 'createBatchBetter'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployer(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: deployerABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof deployerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof deployerABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: deployerABI, ...config } as UseContractReadConfig<
    typeof deployerABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"preComputeAddress"`.
 */
export function useDeployerPreComputeAddress<TSelectData = ReadContractResult<typeof deployerABI, 'preComputeAddress'>>(
  config: Omit<
    UseContractReadConfig<typeof deployerABI, 'preComputeAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: deployerABI, functionName: 'preComputeAddress', ...config } as UseContractReadConfig<
    typeof deployerABI,
    'preComputeAddress',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof deployerABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof deployerABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployerABI, TFunctionName>({ abi: deployerABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"deploy"`.
 */
export function useDeployerDeploy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof deployerABI, 'deploy'>['abi'], 'deploy'> & {
        functionName?: 'deploy';
      }
    : UseContractWriteConfig<TMode, typeof deployerABI, 'deploy'> & {
        abi?: never;
        functionName?: 'deploy';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployerABI, 'deploy'>({
    abi: deployerABI,
    functionName: 'deploy',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployerABI}__.
 */
export function usePrepareDeployerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof deployerABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: deployerABI, ...config } as UsePrepareContractWriteConfig<
    typeof deployerABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"deploy"`.
 */
export function usePrepareDeployerDeploy(
  config: Omit<UsePrepareContractWriteConfig<typeof deployerABI, 'deploy'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployerABI,
    functionName: 'deploy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployerABI, 'deploy'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<TSelectData = ReadContractResult<typeof erc721ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({ abi: erc721ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<typeof erc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc721ABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc721ABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc721ABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'allowance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'decimals',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<TSelectData = ReadContractResult<typeof erc20ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({ abi: erc20ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer';
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link fooABI}__.
 */
export function useFoo(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: fooABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__.
 */
export function useFooRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof fooABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: fooABI, ...config } as UseContractReadConfig<
    typeof fooABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"channelById"`.
 */
export function useFooChannelById<TSelectData = ReadContractResult<typeof fooABI, 'channelById'>>(
  config: Omit<UseContractReadConfig<typeof fooABI, 'channelById', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: fooABI, functionName: 'channelById', ...config } as UseContractReadConfig<
    typeof fooABI,
    'channelById',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"channels"`.
 */
export function useFooChannels<TSelectData = ReadContractResult<typeof fooABI, 'channels'>>(
  config: Omit<UseContractReadConfig<typeof fooABI, 'channels', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: fooABI, functionName: 'channels', ...config } as UseContractReadConfig<
    typeof fooABI,
    'channels',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"channelsCount"`.
 */
export function useFooChannelsCount<TSelectData = ReadContractResult<typeof fooABI, 'channelsCount'>>(
  config: Omit<UseContractReadConfig<typeof fooABI, 'channelsCount', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: fooABI, functionName: 'channelsCount', ...config } as UseContractReadConfig<
    typeof fooABI,
    'channelsCount',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"channelsCount2"`.
 */
export function useFooChannelsCount2<TSelectData = ReadContractResult<typeof fooABI, 'channelsCount2'>>(
  config: Omit<UseContractReadConfig<typeof fooABI, 'channelsCount2', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: fooABI, functionName: 'channelsCount2', ...config } as UseContractReadConfig<
    typeof fooABI,
    'channelsCount2',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fooABI}__.
 */
export function useFooWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof fooABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof fooABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof fooABI, TFunctionName>({ abi: fooABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"createChannelBad"`.
 */
export function useFooCreateChannelBad<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof fooABI, 'createChannelBad'>['abi'],
        'createChannelBad'
      > & { functionName?: 'createChannelBad' }
    : UseContractWriteConfig<TMode, typeof fooABI, 'createChannelBad'> & {
        abi?: never;
        functionName?: 'createChannelBad';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof fooABI, 'createChannelBad'>({
    abi: fooABI,
    functionName: 'createChannelBad',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"createChannelGood"`.
 */
export function useFooCreateChannelGood<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof fooABI, 'createChannelGood'>['abi'],
        'createChannelGood'
      > & { functionName?: 'createChannelGood' }
    : UseContractWriteConfig<TMode, typeof fooABI, 'createChannelGood'> & {
        abi?: never;
        functionName?: 'createChannelGood';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof fooABI, 'createChannelGood'>({
    abi: fooABI,
    functionName: 'createChannelGood',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fooABI}__.
 */
export function usePrepareFooWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof fooABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: fooABI, ...config } as UsePrepareContractWriteConfig<
    typeof fooABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"createChannelBad"`.
 */
export function usePrepareFooCreateChannelBad(
  config: Omit<UsePrepareContractWriteConfig<typeof fooABI, 'createChannelBad'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: fooABI,
    functionName: 'createChannelBad',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fooABI, 'createChannelBad'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"createChannelGood"`.
 */
export function usePrepareFooCreateChannelGood(
  config: Omit<UsePrepareContractWriteConfig<typeof fooABI, 'createChannelGood'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: fooABI,
    functionName: 'createChannelGood',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fooABI, 'createChannelGood'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721Enumerable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721EnumerableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721EnumerableBalanceOf<TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721EnumerableGetApproved<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721EnumerableIsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'isApprovedForAll', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721EnumerableName<TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721EnumerableOwnerOf<TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721EnumerableSupportsInterface<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'supportsInterface', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721EnumerableSymbol<TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721EnumerableTokenByIndex<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'tokenByIndex', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'tokenByIndex',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc721EnumerableTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721EnumerableTokenUri<TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721EnumerableTotalSupply<
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, TFunctionName>({
    abi: erc721EnumerableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'approve'>({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721EnumerableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'safeTransferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721EnumerableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'setApprovalForAll'>({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721EnumerableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'transferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function usePrepareErc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721EnumerableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof erc721EnumerableABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721EnumerableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721EnumerableABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc721EnumerableABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721EnumerableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721EnumerableTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721EnumerableABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc721EnumerableABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721AABI}__.
 */
export function useErc721A(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721AABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__.
 */
export function useErc721ARead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721AABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof erc721AABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc721AABI, ...config } as UseContractReadConfig<
    typeof erc721AABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721ABalanceOf<TSelectData = ReadContractResult<typeof erc721AABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721AABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721AGetApproved<TSelectData = ReadContractResult<typeof erc721AABI, 'getApproved'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721AABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721AIsApprovedForAll<TSelectData = ReadContractResult<typeof erc721AABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721AABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"name"`.
 */
export function useErc721AName<TSelectData = ReadContractResult<typeof erc721AABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721AABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721AOwnerOf<TSelectData = ReadContractResult<typeof erc721AABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721AABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721ASupportsInterface<TSelectData = ReadContractResult<typeof erc721AABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721AABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721ASymbol<TSelectData = ReadContractResult<typeof erc721AABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc721AABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721ATokenUri<TSelectData = ReadContractResult<typeof erc721AABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721AABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721ATotalSupply<TSelectData = ReadContractResult<typeof erc721AABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721AABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: erc721AABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc721AABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AABI}__.
 */
export function useErc721AWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721AABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721AABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AABI, TFunctionName>({ abi: erc721AABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721AApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721AABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof erc721AABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AABI, 'approve'>({
    abi: erc721AABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721ASafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721AABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721AABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AABI, 'safeTransferFrom'>({
    abi: erc721AABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721ASetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721AABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721AABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AABI, 'setApprovalForAll'>({
    abi: erc721AABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721ATransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721AABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721AABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AABI, 'transferFrom'>({
    abi: erc721AABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AABI}__.
 */
export function usePrepareErc721AWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721AABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721AABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721AABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721AApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721AABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721AABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721ASafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721AABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721AABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721ASetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721AABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721AABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721ATransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721AABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721AABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AABI}__.
 */
export function useErc721AEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721AABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721AABI, ...config } as UseContractEventConfig<typeof erc721AABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721AApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc721AABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721AABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc721AABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721AApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721AABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721AABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc721AABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AABI}__ and `eventName` set to `"ConsecutiveTransfer"`.
 */
export function useErc721AConsecutiveTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc721AABI, 'ConsecutiveTransfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721AABI, eventName: 'ConsecutiveTransfer', ...config } as UseContractEventConfig<
    typeof erc721AABI,
    'ConsecutiveTransfer'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721ATransferEvent(
  config: Omit<UseContractEventConfig<typeof erc721AABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc721AABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc721AABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721AIerc721ReceiverABI}__.
 */
export function useErc721AIerc721Receiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721AIerc721ReceiverABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverABI}__.
 */
export function useErc721AIerc721ReceiverWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721AIerc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721AIerc721ReceiverABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AIerc721ReceiverABI, TFunctionName>({
    abi: erc721AIerc721ReceiverABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useErc721AIerc721ReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721AIerc721ReceiverABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof erc721AIerc721ReceiverABI, 'onERC721Received'> & {
        abi?: never;
        functionName?: 'onERC721Received';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721AIerc721ReceiverABI, 'onERC721Received'>({
    abi: erc721AIerc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverABI}__.
 */
export function usePrepareErc721AIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721AIerc721ReceiverABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721AIerc721ReceiverABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721AIerc721ReceiverABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareErc721AIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721AIerc721ReceiverABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AIerc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721AIerc721ReceiverABI, 'onERC721Received'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link goodABI}__.
 */
export function useGood(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: goodABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__.
 */
export function useGoodRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof goodABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof goodABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: goodABI, ...config } as UseContractReadConfig<
    typeof goodABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGoodBalanceOf<TSelectData = ReadContractResult<typeof goodABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof goodABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"getApproved"`.
 */
export function useGoodGetApproved<TSelectData = ReadContractResult<typeof goodABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof goodABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useGoodIsApprovedForAll<TSelectData = ReadContractResult<typeof goodABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof goodABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof goodABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"name"`.
 */
export function useGoodName<TSelectData = ReadContractResult<typeof goodABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof goodABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"owner"`.
 */
export function useGoodOwner<TSelectData = ReadContractResult<typeof goodABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof goodABI,
    'owner',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useGoodOwnerOf<TSelectData = ReadContractResult<typeof goodABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof goodABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGoodSupportsInterface<TSelectData = ReadContractResult<typeof goodABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof goodABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof goodABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"symbol"`.
 */
export function useGoodSymbol<TSelectData = ReadContractResult<typeof goodABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof goodABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useGoodTokenUri<TSelectData = ReadContractResult<typeof goodABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof goodABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useGoodTotalSupply<TSelectData = ReadContractResult<typeof goodABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof goodABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: goodABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof goodABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__.
 */
export function useGoodWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof goodABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof goodABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, TFunctionName>({ abi: goodABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"approve"`.
 */
export function useGoodApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof goodABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof goodABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'approve'>({
    abi: goodABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"batchAirdrop"`.
 */
export function useGoodBatchAirdrop<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof goodABI, 'batchAirdrop'>['abi'],
        'batchAirdrop'
      > & { functionName?: 'batchAirdrop' }
    : UseContractWriteConfig<TMode, typeof goodABI, 'batchAirdrop'> & {
        abi?: never;
        functionName?: 'batchAirdrop';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'batchAirdrop'>({
    abi: goodABI,
    functionName: 'batchAirdrop',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useGoodRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof goodABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof goodABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'renounceOwnership'>({
    abi: goodABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useGoodSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof goodABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof goodABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'safeTransferFrom'>({
    abi: goodABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useGoodSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof goodABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof goodABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'setApprovalForAll'>({
    abi: goodABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useGoodTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof goodABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof goodABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'transferFrom'>({
    abi: goodABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useGoodTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof goodABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof goodABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof goodABI, 'transferOwnership'>({
    abi: goodABI,
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__.
 */
export function usePrepareGoodWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: goodABI, ...config } as UsePrepareContractWriteConfig<
    typeof goodABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGoodApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: goodABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof goodABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"batchAirdrop"`.
 */
export function usePrepareGoodBatchAirdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'batchAirdrop'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: goodABI,
    functionName: 'batchAirdrop',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goodABI, 'batchAirdrop'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareGoodRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: goodABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goodABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareGoodSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: goodABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goodABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareGoodSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: goodABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goodABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareGoodTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: goodABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goodABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goodABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareGoodTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof goodABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: goodABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goodABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodABI}__.
 */
export function useGoodEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof goodABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: goodABI, ...config } as UseContractEventConfig<typeof goodABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodABI}__ and `eventName` set to `"Approval"`.
 */
export function useGoodApprovalEvent(
  config: Omit<UseContractEventConfig<typeof goodABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: goodABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof goodABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useGoodApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof goodABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: goodABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof goodABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodABI}__ and `eventName` set to `"ConsecutiveTransfer"`.
 */
export function useGoodConsecutiveTransferEvent(
  config: Omit<UseContractEventConfig<typeof goodABI, 'ConsecutiveTransfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: goodABI, eventName: 'ConsecutiveTransfer', ...config } as UseContractEventConfig<
    typeof goodABI,
    'ConsecutiveTransfer'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useGoodOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof goodABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: goodABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof goodABI,
    'OwnershipTransferred'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goodABI}__ and `eventName` set to `"Transfer"`.
 */
export function useGoodTransferEvent(
  config: Omit<UseContractEventConfig<typeof goodABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: goodABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof goodABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'allowance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({ abi: ierc20ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer';
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<typeof ierc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc721ABI, ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({ abi: ierc721ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, ...config } as UseContractEventConfig<typeof ierc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20PermitABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TSelectData = ReadContractResult<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<TSelectData = ReadContractResult<typeof ierc20PermitABI, 'nonces'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'nonces',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({ abi: ierc20PermitABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'], 'permit'> & {
        functionName?: 'permit';
      }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never;
        functionName?: 'permit';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'decimals',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({ abi: ierc20MetadataABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721Enumerable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721EnumerableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721EnumerableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721EnumerableGetApproved<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721EnumerableIsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'isApprovedForAll', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721EnumerableOwnerOf<TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721EnumerableSupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'supportsInterface', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIerc721EnumerableTokenByIndex<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenByIndex', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIerc721EnumerableTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721EnumerableTotalSupply<
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, TFunctionName>({
    abi: ierc721EnumerableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'approve'>({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721EnumerableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'safeTransferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721EnumerableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'setApprovalForAll'>({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721EnumerableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'transferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function usePrepareIerc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721EnumerableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof ierc721EnumerableABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721EnumerableApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721EnumerableABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc721EnumerableABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721EnumerableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721EnumerableTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721EnumerableABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc721EnumerableABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721AABI}__.
 */
export function useIerc721A(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721AABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__.
 */
export function useIerc721ARead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721AABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc721AABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc721AABI, ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721ABalanceOf<TSelectData = ReadContractResult<typeof ierc721AABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721AABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721AGetApproved<TSelectData = ReadContractResult<typeof ierc721AABI, 'getApproved'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721AABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721AIsApprovedForAll<TSelectData = ReadContractResult<typeof ierc721AABI, 'isApprovedForAll'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721AABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721AName<TSelectData = ReadContractResult<typeof ierc721AABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof ierc721AABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721AOwnerOf<TSelectData = ReadContractResult<typeof ierc721AABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721AABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721ASupportsInterface<TSelectData = ReadContractResult<typeof ierc721AABI, 'supportsInterface'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721AABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721ASymbol<TSelectData = ReadContractResult<typeof ierc721AABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof ierc721AABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721ATokenUri<TSelectData = ReadContractResult<typeof ierc721AABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof ierc721AABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721ATotalSupply<TSelectData = ReadContractResult<typeof ierc721AABI, 'totalSupply'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721AABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721AABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc721AABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AABI}__.
 */
export function useIerc721AWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721AABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721AABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721AABI, TFunctionName>({ abi: ierc721AABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721AApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721AABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof ierc721AABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721AABI, 'approve'>({
    abi: ierc721AABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721ASafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721AABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721AABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721AABI, 'safeTransferFrom'>({
    abi: ierc721AABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721ASetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721AABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721AABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721AABI, 'setApprovalForAll'>({
    abi: ierc721AABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721ATransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721AABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721AABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721AABI, 'transferFrom'>({
    abi: ierc721AABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AABI}__.
 */
export function usePrepareIerc721AWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721AABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721AABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721AABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721AApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721AABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721AABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721ASafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721AABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721AABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721ASetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721AABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721AABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721ATransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721AABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721AABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AABI}__.
 */
export function useIerc721AEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721AABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721AABI, ...config } as UseContractEventConfig<typeof ierc721AABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721AApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc721AABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721AABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc721AABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721AApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721AABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721AABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc721AABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AABI}__ and `eventName` set to `"ConsecutiveTransfer"`.
 */
export function useIerc721AConsecutiveTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721AABI, 'ConsecutiveTransfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721AABI, eventName: 'ConsecutiveTransfer', ...config } as UseContractEventConfig<
    typeof ierc721AABI,
    'ConsecutiveTransfer'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721ATransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721AABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721AABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc721AABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ReceiverABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, 'onERC721Received'> & {
        abi?: never;
        functionName?: 'onERC721Received';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721ReceiverABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iMulticall3ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getBasefee'>>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBasefee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBasefee', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBasefee',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getBlockHash'>>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBlockHash', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBlockHash',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getBlockNumber'>>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBlockNumber', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockNumber', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBlockNumber',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getChainId'>>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getChainId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getChainId', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getChainId',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getCurrentBlockCoinbase'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockCoinbase', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockCoinbase', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getCurrentBlockDifficulty'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockDifficulty', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockDifficulty', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getCurrentBlockGasLimit'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockGasLimit', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockGasLimit', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getCurrentBlockTimestamp'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockTimestamp', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockTimestamp', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getEthBalance'>>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getEthBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getEthBalance', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getEthBalance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, 'getLastBlockHash'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getLastBlockHash', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getLastBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getLastBlockHash',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof iMulticall3ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, TFunctionName>({ abi: iMulticall3ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate'>['abi'],
        'aggregate'
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate'> & {
        abi?: never;
        functionName?: 'aggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3'>['abi'],
        'aggregate3'
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate3'> & {
        abi?: never;
        functionName?: 'aggregate3';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3Value'>['abi'],
        'aggregate3Value'
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate3Value'> & {
        abi?: never;
        functionName?: 'aggregate3Value';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3Value'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'blockAndAggregate'>['abi'],
        'blockAndAggregate'
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'blockAndAggregate'> & {
        abi?: never;
        functionName?: 'blockAndAggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'blockAndAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryAggregate'>['abi'],
        'tryAggregate'
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'tryAggregate'> & {
        abi?: never;
        functionName?: 'tryAggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryBlockAndAggregate'>['abi'],
        'tryBlockAndAggregate'
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'tryBlockAndAggregate'> & {
        abi?: never;
        functionName?: 'tryBlockAndAggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryBlockAndAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link miladyABI}__.
 */
export function useMilady(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: miladyABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link miladyABI}__.
 */
export function useMiladyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof miladyABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof miladyABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: miladyABI, ...config } as UseContractReadConfig<
    typeof miladyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link miladyABI}__ and `functionName` set to `"milady"`.
 */
export function useMiladyMilady<TSelectData = ReadContractResult<typeof miladyABI, 'milady'>>(
  config: Omit<UseContractReadConfig<typeof miladyABI, 'milady', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: miladyABI, functionName: 'milady', ...config } as UseContractReadConfig<
    typeof miladyABI,
    'milady',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc721MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'getApproved',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'ownerOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<TSelectData = ReadContractResult<typeof ierc721MetadataABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    'tokenURI',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'>({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    'ApprovalForAll'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link modifiersABI}__.
 */
export function useModifiers(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: modifiersABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link modifiersABI}__.
 */
export function useModifiersWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof modifiersABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof modifiersABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof modifiersABI, TFunctionName>({ abi: modifiersABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link modifiersABI}__ and `functionName` set to `"boolFunction"`.
 */
export function useModifiersBoolFunction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof modifiersABI, 'boolFunction'>['abi'],
        'boolFunction'
      > & { functionName?: 'boolFunction' }
    : UseContractWriteConfig<TMode, typeof modifiersABI, 'boolFunction'> & {
        abi?: never;
        functionName?: 'boolFunction';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof modifiersABI, 'boolFunction'>({
    abi: modifiersABI,
    functionName: 'boolFunction',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link modifiersABI}__ and `functionName` set to `"uint256Function"`.
 */
export function useModifiersUint256Function<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof modifiersABI, 'uint256Function'>['abi'],
        'uint256Function'
      > & { functionName?: 'uint256Function' }
    : UseContractWriteConfig<TMode, typeof modifiersABI, 'uint256Function'> & {
        abi?: never;
        functionName?: 'uint256Function';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof modifiersABI, 'uint256Function'>({
    abi: modifiersABI,
    functionName: 'uint256Function',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link modifiersABI}__.
 */
export function usePrepareModifiersWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof modifiersABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: modifiersABI, ...config } as UsePrepareContractWriteConfig<
    typeof modifiersABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link modifiersABI}__ and `functionName` set to `"boolFunction"`.
 */
export function usePrepareModifiersBoolFunction(
  config: Omit<UsePrepareContractWriteConfig<typeof modifiersABI, 'boolFunction'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: modifiersABI,
    functionName: 'boolFunction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof modifiersABI, 'boolFunction'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link modifiersABI}__ and `functionName` set to `"uint256Function"`.
 */
export function usePrepareModifiersUint256Function(
  config: Omit<
    UsePrepareContractWriteConfig<typeof modifiersABI, 'uint256Function'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: modifiersABI,
    functionName: 'uint256Function',
    ...config,
  } as UsePrepareContractWriteConfig<typeof modifiersABI, 'uint256Function'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link packingABI}__.
 */
export function usePacking(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: packingABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link packingABI}__.
 */
export function usePackingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof packingABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof packingABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: packingABI, ...config } as UseContractReadConfig<
    typeof packingABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"aStructs"`.
 */
export function usePackingAStructs<TSelectData = ReadContractResult<typeof packingABI, 'aStructs'>>(
  config: Omit<UseContractReadConfig<typeof packingABI, 'aStructs', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: packingABI, functionName: 'aStructs', ...config } as UseContractReadConfig<
    typeof packingABI,
    'aStructs',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"bStructs"`.
 */
export function usePackingBStructs<TSelectData = ReadContractResult<typeof packingABI, 'bStructs'>>(
  config: Omit<UseContractReadConfig<typeof packingABI, 'bStructs', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: packingABI, functionName: 'bStructs', ...config } as UseContractReadConfig<
    typeof packingABI,
    'bStructs',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link packingABI}__.
 */
export function usePackingWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof packingABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof packingABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof packingABI, TFunctionName>({ abi: packingABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"storeA"`.
 */
export function usePackingStoreA<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof packingABI, 'storeA'>['abi'], 'storeA'> & {
        functionName?: 'storeA';
      }
    : UseContractWriteConfig<TMode, typeof packingABI, 'storeA'> & {
        abi?: never;
        functionName?: 'storeA';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof packingABI, 'storeA'>({
    abi: packingABI,
    functionName: 'storeA',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"storeB"`.
 */
export function usePackingStoreB<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof packingABI, 'storeB'>['abi'], 'storeB'> & {
        functionName?: 'storeB';
      }
    : UseContractWriteConfig<TMode, typeof packingABI, 'storeB'> & {
        abi?: never;
        functionName?: 'storeB';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof packingABI, 'storeB'>({
    abi: packingABI,
    functionName: 'storeB',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"updateA"`.
 */
export function usePackingUpdateA<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof packingABI, 'updateA'>['abi'], 'updateA'> & {
        functionName?: 'updateA';
      }
    : UseContractWriteConfig<TMode, typeof packingABI, 'updateA'> & {
        abi?: never;
        functionName?: 'updateA';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof packingABI, 'updateA'>({
    abi: packingABI,
    functionName: 'updateA',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"updateB"`.
 */
export function usePackingUpdateB<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof packingABI, 'updateB'>['abi'], 'updateB'> & {
        functionName?: 'updateB';
      }
    : UseContractWriteConfig<TMode, typeof packingABI, 'updateB'> & {
        abi?: never;
        functionName?: 'updateB';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof packingABI, 'updateB'>({
    abi: packingABI,
    functionName: 'updateB',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link packingABI}__.
 */
export function usePreparePackingWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof packingABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: packingABI, ...config } as UsePrepareContractWriteConfig<
    typeof packingABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"storeA"`.
 */
export function usePreparePackingStoreA(
  config: Omit<UsePrepareContractWriteConfig<typeof packingABI, 'storeA'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: packingABI,
    functionName: 'storeA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof packingABI, 'storeA'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"storeB"`.
 */
export function usePreparePackingStoreB(
  config: Omit<UsePrepareContractWriteConfig<typeof packingABI, 'storeB'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: packingABI,
    functionName: 'storeB',
    ...config,
  } as UsePrepareContractWriteConfig<typeof packingABI, 'storeB'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"updateA"`.
 */
export function usePreparePackingUpdateA(
  config: Omit<UsePrepareContractWriteConfig<typeof packingABI, 'updateA'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: packingABI,
    functionName: 'updateA',
    ...config,
  } as UsePrepareContractWriteConfig<typeof packingABI, 'updateA'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link packingABI}__ and `functionName` set to `"updateB"`.
 */
export function usePreparePackingUpdateB(
  config: Omit<UsePrepareContractWriteConfig<typeof packingABI, 'updateB'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: packingABI,
    functionName: 'updateB',
    ...config,
  } as UsePrepareContractWriteConfig<typeof packingABI, 'updateB'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link revertingABI}__.
 */
export function useReverting(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: revertingABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link revertingABI}__.
 */
export function useRevertingWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof revertingABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof revertingABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof revertingABI, TFunctionName>({ abi: revertingABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link revertingABI}__ and `functionName` set to `"revertCustomError"`.
 */
export function useRevertingRevertCustomError<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof revertingABI, 'revertCustomError'>['abi'],
        'revertCustomError'
      > & { functionName?: 'revertCustomError' }
    : UseContractWriteConfig<TMode, typeof revertingABI, 'revertCustomError'> & {
        abi?: never;
        functionName?: 'revertCustomError';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof revertingABI, 'revertCustomError'>({
    abi: revertingABI,
    functionName: 'revertCustomError',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link revertingABI}__ and `functionName` set to `"revertRequire"`.
 */
export function useRevertingRevertRequire<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof revertingABI, 'revertRequire'>['abi'],
        'revertRequire'
      > & { functionName?: 'revertRequire' }
    : UseContractWriteConfig<TMode, typeof revertingABI, 'revertRequire'> & {
        abi?: never;
        functionName?: 'revertRequire';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof revertingABI, 'revertRequire'>({
    abi: revertingABI,
    functionName: 'revertRequire',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link revertingABI}__.
 */
export function usePrepareRevertingWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof revertingABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: revertingABI, ...config } as UsePrepareContractWriteConfig<
    typeof revertingABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link revertingABI}__ and `functionName` set to `"revertCustomError"`.
 */
export function usePrepareRevertingRevertCustomError(
  config: Omit<
    UsePrepareContractWriteConfig<typeof revertingABI, 'revertCustomError'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: revertingABI,
    functionName: 'revertCustomError',
    ...config,
  } as UsePrepareContractWriteConfig<typeof revertingABI, 'revertCustomError'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link revertingABI}__ and `functionName` set to `"revertRequire"`.
 */
export function usePrepareRevertingRevertRequire(
  config: Omit<UsePrepareContractWriteConfig<typeof revertingABI, 'revertRequire'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: revertingABI,
    functionName: 'revertRequire',
    ...config,
  } as UsePrepareContractWriteConfig<typeof revertingABI, 'revertRequire'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link revertsBadABI}__.
 */
export function useRevertsBad(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: revertsBadABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsBadABI}__.
 */
export function useRevertsBadRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof revertsBadABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof revertsBadABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: revertsBadABI, ...config } as UseContractReadConfig<
    typeof revertsBadABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsBadABI}__ and `functionName` set to `"milady"`.
 */
export function useRevertsBadMilady<TSelectData = ReadContractResult<typeof revertsBadABI, 'milady'>>(
  config: Omit<UseContractReadConfig<typeof revertsBadABI, 'milady', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: revertsBadABI, functionName: 'milady', ...config } as UseContractReadConfig<
    typeof revertsBadABI,
    'milady',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsBadABI}__ and `functionName` set to `"order"`.
 */
export function useRevertsBadOrder<TSelectData = ReadContractResult<typeof revertsBadABI, 'order'>>(
  config: Omit<UseContractReadConfig<typeof revertsBadABI, 'order', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: revertsBadABI, functionName: 'order', ...config } as UseContractReadConfig<
    typeof revertsBadABI,
    'order',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsBadABI}__ and `functionName` set to `"world"`.
 */
export function useRevertsBadWorld<TSelectData = ReadContractResult<typeof revertsBadABI, 'world'>>(
  config: Omit<UseContractReadConfig<typeof revertsBadABI, 'world', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: revertsBadABI, functionName: 'world', ...config } as UseContractReadConfig<
    typeof revertsBadABI,
    'world',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link revertsGoodABI}__.
 */
export function useRevertsGood(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: revertsGoodABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsGoodABI}__.
 */
export function useRevertsGoodRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof revertsGoodABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof revertsGoodABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: revertsGoodABI, ...config } as UseContractReadConfig<
    typeof revertsGoodABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsGoodABI}__ and `functionName` set to `"milady"`.
 */
export function useRevertsGoodMilady<TSelectData = ReadContractResult<typeof revertsGoodABI, 'milady'>>(
  config: Omit<UseContractReadConfig<typeof revertsGoodABI, 'milady', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: revertsGoodABI, functionName: 'milady', ...config } as UseContractReadConfig<
    typeof revertsGoodABI,
    'milady',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsGoodABI}__ and `functionName` set to `"order"`.
 */
export function useRevertsGoodOrder<TSelectData = ReadContractResult<typeof revertsGoodABI, 'order'>>(
  config: Omit<UseContractReadConfig<typeof revertsGoodABI, 'order', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: revertsGoodABI, functionName: 'order', ...config } as UseContractReadConfig<
    typeof revertsGoodABI,
    'order',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link revertsGoodABI}__ and `functionName` set to `"world"`.
 */
export function useRevertsGoodWorld<TSelectData = ReadContractResult<typeof revertsGoodABI, 'world'>>(
  config: Omit<UseContractReadConfig<typeof revertsGoodABI, 'world', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: revertsGoodABI, functionName: 'world', ...config } as UseContractReadConfig<
    typeof revertsGoodABI,
    'world',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TSelectData = ReadContractResult<typeof ownableABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    'owner',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({ abi: ownableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<typeof ownableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableABI,
    'OwnershipTransferred'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tokenABI}__.
 */
export function useToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: tokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof tokenABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: tokenABI, ...config } as UseContractReadConfig<
    typeof tokenABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useTokenAllowance<TSelectData = ReadContractResult<typeof tokenABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'allowance',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTokenBalanceOf<TSelectData = ReadContractResult<typeof tokenABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'balanceOf',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useTokenDecimals<TSelectData = ReadContractResult<typeof tokenABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'decimals',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"name"`.
 */
export function useTokenName<TSelectData = ReadContractResult<typeof tokenABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'name',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useTokenSymbol<TSelectData = ReadContractResult<typeof tokenABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'symbol',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTokenTotalSupply<TSelectData = ReadContractResult<typeof tokenABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'totalSupply',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof tokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, TFunctionName>({ abi: tokenABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"approve"`.
 */
export function useTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'approve'>({
    abi: tokenABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'decreaseAllowance'>({
    abi: tokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'increaseAllowance'>({
    abi: tokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"mint"`.
 */
export function useTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, 'mint'>['abi'], 'mint'> & {
        functionName?: 'mint';
      }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'mint'>({ abi: tokenABI, functionName: 'mint', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer';
      }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'transfer'>({
    abi: tokenABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'transferFrom'>({
    abi: tokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__.
 */
export function usePrepareTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tokenABI, ...config } as UsePrepareContractWriteConfig<
    typeof tokenABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTokenApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tokenABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof tokenABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareTokenDecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareTokenIncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTokenMint(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'mint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tokenABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<
    typeof tokenABI,
    'mint'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTokenTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTokenTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof tokenABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: tokenABI, ...config } as UseContractEventConfig<typeof tokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useTokenApprovalEvent(
  config: Omit<UseContractEventConfig<typeof tokenABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tokenABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof tokenABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTokenTransferEvent(
  config: Omit<UseContractEventConfig<typeof tokenABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tokenABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof tokenABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link whoopDoopRaffleABI}__.
 */
export function useWhoopDoopRaffle(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: whoopDoopRaffleABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link whoopDoopRaffleABI}__.
 */
export function useWhoopDoopRaffleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof whoopDoopRaffleABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof whoopDoopRaffleABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: whoopDoopRaffleABI, ...config } as UseContractReadConfig<
    typeof whoopDoopRaffleABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link whoopDoopRaffleABI}__ and `functionName` set to `"OnGoingRaffles"`.
 */
export function useWhoopDoopRaffleOnGoingRaffles<
  TSelectData = ReadContractResult<typeof whoopDoopRaffleABI, 'OnGoingRaffles'>,
>(
  config: Omit<
    UseContractReadConfig<typeof whoopDoopRaffleABI, 'OnGoingRaffles', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: whoopDoopRaffleABI,
    functionName: 'OnGoingRaffles',
    ...config,
  } as UseContractReadConfig<typeof whoopDoopRaffleABI, 'OnGoingRaffles', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link whoopDoopRaffleABI}__.
 */
export function useWhoopDoopRaffleWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof whoopDoopRaffleABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof whoopDoopRaffleABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof whoopDoopRaffleABI, TFunctionName>({
    abi: whoopDoopRaffleABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link whoopDoopRaffleABI}__ and `functionName` set to `"registerPurchase"`.
 */
export function useWhoopDoopRaffleRegisterPurchase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof whoopDoopRaffleABI, 'registerPurchase'>['abi'],
        'registerPurchase'
      > & { functionName?: 'registerPurchase' }
    : UseContractWriteConfig<TMode, typeof whoopDoopRaffleABI, 'registerPurchase'> & {
        abi?: never;
        functionName?: 'registerPurchase';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof whoopDoopRaffleABI, 'registerPurchase'>({
    abi: whoopDoopRaffleABI,
    functionName: 'registerPurchase',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link whoopDoopRaffleABI}__.
 */
export function usePrepareWhoopDoopRaffleWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof whoopDoopRaffleABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: whoopDoopRaffleABI, ...config } as UsePrepareContractWriteConfig<
    typeof whoopDoopRaffleABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link whoopDoopRaffleABI}__ and `functionName` set to `"registerPurchase"`.
 */
export function usePrepareWhoopDoopRaffleRegisterPurchase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof whoopDoopRaffleABI, 'registerPurchase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: whoopDoopRaffleABI,
    functionName: 'registerPurchase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof whoopDoopRaffleABI, 'registerPurchase'>);
}
